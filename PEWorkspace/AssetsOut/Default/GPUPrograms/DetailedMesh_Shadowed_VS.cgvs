#ifndef DETAILEDMESH_VS_cg
#define DETAILEDMESH_VS_cg
#define DETAILEDMESH_GLOW_PS
#include "APIAbstraction.gpu"
#include "StandardConstants.fx"
#include "DetailedMesh_Structs.fx"

DETAILED_MESH_SHADOWED_PS_IN DetailedMesh_Shadowed_VS(DETAILED_MESH_VS_IN vIn)
{
    DETAILED_MESH_SHADOWED_PS_IN vOut = (DETAILED_MESH_SHADOWED_PS_IN) 0;
	float3 pos = vIn.iPosL;
	
	Matrix WVP = gWVP;
	Matrix W = gW;
    
    //float w1Dist = abs(length(windSource1.pos.xz - pos.xz));
    //float w1Str = pos.y * 3 / w1Dist;

    
    //vOut.iWind = make_float2((abs(pos.y - vIn.iWind.x) < 0.01), 0);

    //vOut.iPosH = mul(make_float4(pos, 1.0), WVP);
    //vOut.iNormalW = mul(make_float4(vIn.iNormal, 0), W).xyz;
    vOut.iPosW =  mul(make_float4(pos, 1.0), W).xyz;
    

    float w1Str = min(vIn.iWind.x / 2, 3.0);
    float w1Dir = normalize(windSource1.dir);
    
    float w2Dist = abs(length(windSource2.pos.xz - vOut.iPosW.xz));
    float w2Str = min(vIn.iWind.x / pow(w2Dist, 2), 1.0);
    float2 w2Dir = normalize(vOut.iPosW.xz - windSource2.pos.xz);
    
    float w3Dist = abs(length(windSource3.pos.xz - vOut.iPosW.xz));
    float w3Str = min(vIn.iWind.x / pow(w3Dist, 2), 1.0);
    float2 w3Dir = normalize(vOut.iPosW.xz - windSource3.pos.xz);
    
    //pos.xz += (w1Str * w1Dir) + (w2Str * w2Dir) + (w3Str * w3Dir);
    
    pos.xz += (w1Str * w1Dir) + (w2Str * w2Dir) + (w3Str * w3Dir);
    
    //pos.xz += (w2Str * w2Dir) + (w3Str * w3Dir);
    
    //pos.xz += (w3Str * w3Dir);
    
    //pos.xz += (w1Str * w1Dir);
    
    vOut.iPosW = mul(make_float4(pos, 1.0), W).xyz;
    vOut.iPosH = mul(make_float4(pos, 1.0), WVP);
    vOut.iNormalW = mul(make_float4(vIn.iNormal, 0), W).xyz;
    
    
    vOut.iTangentW = mul(make_float4(vIn.iTangent, 1.0), W).xyz;
    vOut.iTexCoord = vIn.iTexCoord;
    vOut.iProjTexCoord = mul(make_float4(vOut.iPosW, 1.0), gLightWVP);
    
    //vOut.iWind = float2(0, 0);
    
    //vIn.iWind = (vOut.iPosW.y, 0.0);
    
    //vOut.iWind = mul(make_float4(0, 0, vIn.iWind.x, 1.0), W);
    
    //float4 intermed = mul(make_float4(0, vIn.iWind, 1), W);
    
    //vOut.iWind = make_float2(intermed.y, 0);
    
    //vOut.iWind = mul(make_float4(0, vIn.iWind, 1.0), W).xy;
    
    //vOut.iWind = make_float2(vOut.iPosW.y, 0.0);
    
    
    
    //vOut.iWind = make_float2(mul(make_float4(0.0, vIn.iWind, 1.0), W).y, 0.0);
    
    //vOut.iWind = mul(make_float4(0, vIn.iWind.x, 0, 1.0), W).y, 0;
    

    //float w2 = length(windSource2.pos.xyz - vOut.iPosW);
    //float w3 = length(windSource3.pos.xyz - vOut.iPosW);
    
    //vOut.iPosW.xz += (windSource1.dir.xz) * (10 / w1);
    //vOut.iPosW.xz += windSource2.dir.xz * (1 / w2);
    //vOut.iPosW.xz += windSource3.dir.xz * (1 / w3);
    
    //vOut.iWind = make_float2((abs(pos.y - vIn.iWind.x)) < 0.1, 0);
    
    //vOut.iWind = make_float2(vOut.iPosW.y, 0.0);
    

    //float w2 = length(windSource2.pos.xz - vOut.iPosW.xz);
    //float w3 = length(windSource3.pos.xz - vOut.iPosW.xz);
    
    ////if dot(windSource1.dir, )
    
    ////float w1 = length(windSource1.pos.xz - vOut.iPosW.xz);
    ////float2 interDir = normalize(windSource1.dir.xz) * (vOut.iPosW.y / w1);
    //////float2 interMed = vOut.iPosW.xz;
    ////vOut.iPosW = make_float4(interDir.x, vOut.iPosW.y, interDir.y, 1);
    ////float2 interMed = interDir * (100 / w1);
    
    ////vOut.iPosW = make_float4(vOut.iPosW.x + interMed.x, vOut.iPosW.y, vOut.iPosW.z + interMed.y, 1.0);
    
    ////vOut.iWind = make_float2(w2 - 2, 0);
    
    //float w1 = length(windSource1.pos.xz - vOut.iPosW.xz);
    
    ////vOut.iPosW.x += 10/w1;
    ////vOut.iPosW.z += 10/w1;
    
    //vOut.iPosH = make_float4(0, 0, 0, 1);
    
    //vOut.iWind = make_float2(vOut.iPosW.y / 5, 0);
    
    //vOut.iWind = make_float2((abs(vIn.iWind.x - pos.y) < 0.1), 0);
    
    vOut.iWind = vIn.iWind / 5;
    
    return vOut;
}

VS_wrapper_DETAILED_MESH_SHADOWED(DetailedMesh_Shadowed_VS)

#endif
